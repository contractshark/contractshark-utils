{
  "contractName": "Addresses",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"James Lockhart <james@n3tw0rk.co.uk>\",\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"Addresses Library  * In summary this is a simple library of address functions which extends the pre-existing functionality \"}},\"settings\":{\"compilationTarget\":{\"/Users/sbacha/contractshark-utils/contracts/Addresses.sol\":\"Addresses\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/sbacha/contractshark-utils/contracts/Addresses.sol\":{\"keccak256\":\"0x38bea0ab56475775af4b76213f2a851fb663efe667c9ac285c741e22e9dd4dd5\",\"urls\":[\"bzz-raw://472e62c4c7a1df008fc778c23c1598b1cf7ccda5d01873000a7c8e6d6afd8f31\",\"dweb:/ipfs/QmbA1hAVmVMHu9Ux9HAxTbLvkFBj9ne7y6jg5r4gq3pHQU\"]}},\"version\":1}",
  "bytecode": "0x60556023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c6471daa20c19c1b5a67d57e11482e57d04f169e8407a09bd7421e2c422978b864736f6c63430005110032",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a72315820c6471daa20c19c1b5a67d57e11482e57d04f169e8407a09bd7421e2c422978b864736f6c63430005110032",
  "sourceMap": "226:452:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",
  "deployedSourceMap": "226:452:0:-;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\r\n\r\n/**\r\n * Addresses Library\r\n *\r\n * In summary this is a simple library of address functions which extends the\r\n * pre-existing functionality\r\n *\r\n * @author James Lockhart <james@n3tw0rk.co.uk>\r\n */\r\nlibrary Addresses {\r\n    /**\r\n     * Is Contract\r\n     *\r\n     * Check to see if the subject address is a contract on the Ethereum network\r\n     *\r\n     * @param _base The address on the network to check if it is a contract\r\n     * @return bool Returns true if it is a valid contract\r\n     */\r\n    function isContract(address _base) internal view returns (bool _r) {\r\n        assembly {\r\n            _r := gt(extcodesize(_base), 0)\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "/Users/sbacha/contractshark-utils/contracts/Addresses.sol",
  "ast": {
    "absolutePath": "/Users/sbacha/contractshark-utils/contracts/Addresses.sol",
    "exportedSymbols": {
      "Addresses": [11]
    },
    "id": 12,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": ["solidity", "^", "0.5", ".0"],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "Addresses Library\n\n * In summary this is a simple library of address functions which extends the\npre-existing functionality\n\n * @author James Lockhart <james@n3tw0rk.co.uk>",
        "fullyImplemented": true,
        "id": 11,
        "linearizedBaseContracts": [11],
        "name": "Addresses",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 9,
              "nodeType": "Block",
              "src": "591:84:0",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "_r": {
                        "declaration": 6,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "626:2:0",
                        "valueSize": 1
                      }
                    },
                    {
                      "_base": {
                        "declaration": 3,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "647:5:0",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 8,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    _r := gt(extcodesize(_base), 0)\n}",
                  "src": "602:66:0"
                }
              ]
            },
            "documentation": "Is Contract\n\n     * Check to see if the subject address is a contract on the Ethereum network\n\n     * @param _base The address on the network to check if it is a contract\n@return bool Returns true if it is a valid contract",
            "id": 10,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3,
                  "name": "_base",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "544:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "544:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "543:15:0"
            },
            "returnParameters": {
              "id": 7,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6,
                  "name": "_r",
                  "nodeType": "VariableDeclaration",
                  "scope": 10,
                  "src": "582:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "582:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "581:9:0"
            },
            "scope": 11,
            "src": "524:151:0",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 12,
        "src": "226:452:0"
      }
    ],
    "src": "0:680:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/sbacha/contractshark-utils/contracts/Addresses.sol",
      "exportedSymbols": {
        "Addresses": [11]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": ["solidity", "^", "0.5", ".0"]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "attributes": {
          "baseContracts": [null],
          "contractDependencies": [null],
          "contractKind": "library",
          "documentation": "Addresses Library\n\n * In summary this is a simple library of address functions which extends the\npre-existing functionality\n\n * @author James Lockhart <james@n3tw0rk.co.uk>",
          "fullyImplemented": true,
          "linearizedBaseContracts": [11],
          "name": "Addresses",
          "scope": 12
        },
        "children": [
          {
            "attributes": {
              "documentation": "Is Contract\n\n     * Check to see if the subject address is a contract on the Ethereum network\n\n     * @param _base The address on the network to check if it is a contract\n@return bool Returns true if it is a valid contract",
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [null],
              "name": "isContract",
              "scope": 11,
              "stateMutability": "view",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_base",
                      "scope": 10,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 2,
                        "name": "ElementaryTypeName",
                        "src": "544:7:0"
                      }
                    ],
                    "id": 3,
                    "name": "VariableDeclaration",
                    "src": "544:13:0"
                  }
                ],
                "id": 4,
                "name": "ParameterList",
                "src": "543:15:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "_r",
                      "scope": 10,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 5,
                        "name": "ElementaryTypeName",
                        "src": "582:4:0"
                      }
                    ],
                    "id": 6,
                    "name": "VariableDeclaration",
                    "src": "582:7:0"
                  }
                ],
                "id": 7,
                "name": "ParameterList",
                "src": "581:9:0"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "externalReferences": [
                        {
                          "_r": {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "626:2:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "_base": {
                            "declaration": 3,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "647:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "operations": "{\n    _r := gt(extcodesize(_base), 0)\n}"
                    },
                    "children": [],
                    "id": 8,
                    "name": "InlineAssembly",
                    "src": "602:66:0"
                  }
                ],
                "id": 9,
                "name": "Block",
                "src": "591:84:0"
              }
            ],
            "id": 10,
            "name": "FunctionDefinition",
            "src": "524:151:0"
          }
        ],
        "id": 11,
        "name": "ContractDefinition",
        "src": "226:452:0"
      }
    ],
    "id": 12,
    "name": "SourceUnit",
    "src": "0:680:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.3",
  "updatedAt": "2021-01-09T21:15:06.600Z",
  "devdoc": {
    "author": "James Lockhart <james@n3tw0rk.co.uk>",
    "methods": {}
  },
  "userdoc": {
    "methods": {},
    "notice": "Addresses Library  * In summary this is a simple library of address functions which extends the pre-existing functionality "
  }
}
